services:

  zoo:
    networks:
      - app_network
    image: zookeeper:3.7.0
    restart: always
    hostname: zoo
    container_name: zoo
    environment:
      ZOO_PORT: 2181
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zoo:2888:3888;2181
    ports:
      - 2181:2181

  kafka:
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app_network
    image: docker.io/bitnami/kafka:3
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zoo:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    depends_on:
      - zoo


  grafana:
    container_name: grafana
    image: grafana/grafana:9.1.8
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH:="/var/lib/grafana/dashboards/kafka-metrics.json"
    networks:
      - app_network
    ports:
      - "3000:3000"

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.54.1
    networks:
      - app_network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  app:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - app_network
    depends_on:
      - kafka
    ports:
      - "127.0.0.1:8080:8080"

  k6:
    container_name: k6
    image: grafana/k6:latest
    networks:
      - app_network
    ports:
      - "6565:6565"
    volumes:
      - ./scripts:/scripts
    command: run /scripts/http.js

networks:
  app_network:
    enable_ipv6: false
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"